// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum RustoreBillingTheme {
  light,
  dark,
}

enum RustorePurchaseAvailabilityType {
  available,
  unavailable,
  unknown,
}

enum RustoreProductType {
  nonConsumable,
  consumable,
  subscription,
}

enum RustorePurchaseState {
  created,
  invoiceCreated,
  confirmed,
  paid,
  cancelled,
  consumed,
  closed,
  paused,
  terminated,
}

enum RustorePaymentResultType {
  success,
  cancelled,
  failure,
  invalidPaymentState,
}

enum RustoreExceptionType {
  notInstalled,
  outdated,
  userUnauthorized,
  requestLimitReached,
  reviewExists,
  invalidReviewInfo,
  general,
}

class RustoreBillingConfig {
  RustoreBillingConfig({
    required this.consoleApplicationId,
    required this.deeplinkScheme,
    this.debugLogs = false,
    this.theme = RustoreBillingTheme.light,
    this.enableLogging = false,
  });

  String consoleApplicationId;

  String deeplinkScheme;

  bool debugLogs;

  RustoreBillingTheme theme;

  bool enableLogging;

  List<Object?> _toList() {
    return <Object?>[
      consoleApplicationId,
      deeplinkScheme,
      debugLogs,
      theme,
      enableLogging,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreBillingConfig decode(Object result) {
    result as List<Object?>;
    return RustoreBillingConfig(
      consoleApplicationId: result[0]! as String,
      deeplinkScheme: result[1]! as String,
      debugLogs: result[2]! as bool,
      theme: result[3]! as RustoreBillingTheme,
      enableLogging: result[4]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreBillingConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustorePurchaseAvailabilityResult {
  RustorePurchaseAvailabilityResult({
    required this.resultType,
    this.cause,
  });

  RustorePurchaseAvailabilityType resultType;

  RustoreException? cause;

  List<Object?> _toList() {
    return <Object?>[
      resultType,
      cause,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustorePurchaseAvailabilityResult decode(Object result) {
    result as List<Object?>;
    return RustorePurchaseAvailabilityResult(
      resultType: result[0]! as RustorePurchaseAvailabilityType,
      cause: result[1] as RustoreException?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustorePurchaseAvailabilityResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustoreProduct {
  RustoreProduct({
    required this.productId,
    required this.productType,
    this.title,
    this.description,
    this.price,
    this.priceLabel,
    this.currency,
    this.language,
    this.subscription,
  });

  String productId;

  RustoreProductType productType;

  String? title;

  String? description;

  int? price;

  String? priceLabel;

  String? currency;

  String? language;

  RustoreProductSubscription? subscription;

  List<Object?> _toList() {
    return <Object?>[
      productId,
      productType,
      title,
      description,
      price,
      priceLabel,
      currency,
      language,
      subscription,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreProduct decode(Object result) {
    result as List<Object?>;
    return RustoreProduct(
      productId: result[0]! as String,
      productType: result[1]! as RustoreProductType,
      title: result[2] as String?,
      description: result[3] as String?,
      price: result[4] as int?,
      priceLabel: result[5] as String?,
      currency: result[6] as String?,
      language: result[7] as String?,
      subscription: result[8] as RustoreProductSubscription?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreProduct || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustoreSubscriptionPeriod {
  RustoreSubscriptionPeriod({
    required this.years,
    required this.months,
    required this.days,
  });

  int years;

  int months;

  int days;

  List<Object?> _toList() {
    return <Object?>[
      years,
      months,
      days,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreSubscriptionPeriod decode(Object result) {
    result as List<Object?>;
    return RustoreSubscriptionPeriod(
      years: result[0]! as int,
      months: result[1]! as int,
      days: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreSubscriptionPeriod || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustoreProductSubscription {
  RustoreProductSubscription({
    this.subscriptionPeriod,
    this.freeTrialPeriod,
    this.gracePeriod,
    this.introductoryPrice,
    this.introductoryPriceAmount,
    this.introductoryPricePeriod,
  });

  RustoreSubscriptionPeriod? subscriptionPeriod;

  RustoreSubscriptionPeriod? freeTrialPeriod;

  RustoreSubscriptionPeriod? gracePeriod;

  String? introductoryPrice;

  String? introductoryPriceAmount;

  RustoreSubscriptionPeriod? introductoryPricePeriod;

  List<Object?> _toList() {
    return <Object?>[
      subscriptionPeriod,
      freeTrialPeriod,
      gracePeriod,
      introductoryPrice,
      introductoryPriceAmount,
      introductoryPricePeriod,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreProductSubscription decode(Object result) {
    result as List<Object?>;
    return RustoreProductSubscription(
      subscriptionPeriod: result[0] as RustoreSubscriptionPeriod?,
      freeTrialPeriod: result[1] as RustoreSubscriptionPeriod?,
      gracePeriod: result[2] as RustoreSubscriptionPeriod?,
      introductoryPrice: result[3] as String?,
      introductoryPriceAmount: result[4] as String?,
      introductoryPricePeriod: result[5] as RustoreSubscriptionPeriod?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreProductSubscription || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustorePurchase {
  RustorePurchase({
    this.purchaseId,
    this.productId,
    this.productType,
    this.invoiceId,
    this.description,
    this.language,
    this.purchaseTime,
    this.orderId,
    this.amountLabel,
    this.amount,
    this.currency,
    this.quantity,
    this.purchaseState,
    this.developerPayload,
  });

  String? purchaseId;

  String? productId;

  RustoreProductType? productType;

  String? invoiceId;

  String? description;

  String? language;

  String? purchaseTime;

  String? orderId;

  String? amountLabel;

  int? amount;

  String? currency;

  int? quantity;

  RustorePurchaseState? purchaseState;

  String? developerPayload;

  List<Object?> _toList() {
    return <Object?>[
      purchaseId,
      productId,
      productType,
      invoiceId,
      description,
      language,
      purchaseTime,
      orderId,
      amountLabel,
      amount,
      currency,
      quantity,
      purchaseState,
      developerPayload,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustorePurchase decode(Object result) {
    result as List<Object?>;
    return RustorePurchase(
      purchaseId: result[0] as String?,
      productId: result[1] as String?,
      productType: result[2] as RustoreProductType?,
      invoiceId: result[3] as String?,
      description: result[4] as String?,
      language: result[5] as String?,
      purchaseTime: result[6] as String?,
      orderId: result[7] as String?,
      amountLabel: result[8] as String?,
      amount: result[9] as int?,
      currency: result[10] as String?,
      quantity: result[11] as int?,
      purchaseState: result[12] as RustorePurchaseState?,
      developerPayload: result[13] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustorePurchase || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustorePaymentResult {
  RustorePaymentResult({
    required this.resultType,
    this.productId = '',
    this.orderId = '',
    this.subscriptionToken = '',
    this.invoiceId = '',
    this.sandbox = false,
    this.purchaseId = '',
    this.errorCode = '',
    this.errorMessage = '',
  });

  RustorePaymentResultType resultType;

  String productId;

  String orderId;

  String subscriptionToken;

  String invoiceId;

  bool sandbox;

  String purchaseId;

  String errorCode;

  String errorMessage;

  List<Object?> _toList() {
    return <Object?>[
      resultType,
      productId,
      orderId,
      subscriptionToken,
      invoiceId,
      sandbox,
      purchaseId,
      errorCode,
      errorMessage,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustorePaymentResult decode(Object result) {
    result as List<Object?>;
    return RustorePaymentResult(
      resultType: result[0]! as RustorePaymentResultType,
      productId: result[1]! as String,
      orderId: result[2]! as String,
      subscriptionToken: result[3]! as String,
      invoiceId: result[4]! as String,
      sandbox: result[5]! as bool,
      purchaseId: result[6]! as String,
      errorCode: result[7]! as String,
      errorMessage: result[8]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustorePaymentResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustoreError {
  RustoreError({
    required this.code,
    required this.message,
    this.description,
  });

  String code;

  String message;

  String? description;

  List<Object?> _toList() {
    return <Object?>[
      code,
      message,
      description,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreError decode(Object result) {
    result as List<Object?>;
    return RustoreError(
      code: result[0]! as String,
      message: result[1]! as String,
      description: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreError || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RustoreException {
  RustoreException({
    required this.type,
    required this.message,
    this.errorCode,
  });

  RustoreExceptionType type;

  String message;

  String? errorCode;

  List<Object?> _toList() {
    return <Object?>[
      type,
      message,
      errorCode,
    ];
  }

  Object encode() {
    return _toList();  }

  static RustoreException decode(Object result) {
    result as List<Object?>;
    return RustoreException(
      type: result[0]! as RustoreExceptionType,
      message: result[1]! as String,
      errorCode: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RustoreException || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is RustoreBillingTheme) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is RustorePurchaseAvailabilityType) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is RustoreProductType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is RustorePurchaseState) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is RustorePaymentResultType) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is RustoreExceptionType) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is RustoreBillingConfig) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is RustorePurchaseAvailabilityResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is RustoreProduct) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is RustoreSubscriptionPeriod) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is RustoreProductSubscription) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is RustorePurchase) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is RustorePaymentResult) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is RustoreError) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is RustoreException) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustoreBillingTheme.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustorePurchaseAvailabilityType.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustoreProductType.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustorePurchaseState.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustorePaymentResultType.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RustoreExceptionType.values[value];
      case 135: 
        return RustoreBillingConfig.decode(readValue(buffer)!);
      case 136: 
        return RustorePurchaseAvailabilityResult.decode(readValue(buffer)!);
      case 137: 
        return RustoreProduct.decode(readValue(buffer)!);
      case 138: 
        return RustoreSubscriptionPeriod.decode(readValue(buffer)!);
      case 139: 
        return RustoreProductSubscription.decode(readValue(buffer)!);
      case 140: 
        return RustorePurchase.decode(readValue(buffer)!);
      case 141: 
        return RustorePaymentResult.decode(readValue(buffer)!);
      case 142: 
        return RustoreError.decode(readValue(buffer)!);
      case 143: 
        return RustoreException.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class RustoreBillingApi {
  /// Constructor for [RustoreBillingApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RustoreBillingApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Initialize the RuStore billing client
  Future<void> initialize(RustoreBillingConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[config]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Handle deep link intent (for payment flows)
  Future<void> onNewIntent(String? intentData) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.onNewIntent$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intentData]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Check if purchases are available on this device
  Future<RustorePurchaseAvailabilityResult> checkPurchasesAvailability() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.checkPurchasesAvailability$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RustorePurchaseAvailabilityResult?)!;
    }
  }

  /// Check if RuStore is installed on the device
  Future<bool> isRustoreUserAuthorized() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.isRustoreUserAuthorized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Get available products by IDs
  Future<List<RustoreProduct>> getProducts(List<String> productIds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.getProducts$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[productIds]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<RustoreProduct>();
    }
  }

  /// Get existing purchases
  Future<List<RustorePurchase>> getPurchases() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.getPurchases$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<RustorePurchase>();
    }
  }

  /// Start purchase flow for a product
  Future<RustorePaymentResult> purchaseProduct(String productId, String? developerPayload) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.purchaseProduct$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[productId, developerPayload]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RustorePaymentResult?)!;
    }
  }

  /// Confirm a successful purchase
  Future<void> confirmPurchase(String purchaseId, String? developerPayload) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.confirmPurchase$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[purchaseId, developerPayload]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Delete a purchase
  Future<void> deletePurchase(String purchaseId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.deletePurchase$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[purchaseId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Set the billing client theme
  Future<void> setTheme(RustoreBillingTheme theme) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rustore_billing_api.RustoreBillingApi.setTheme$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[theme]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class RustoreBillingCallbackApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called when purchase state changes
  void onPurchaseResult(RustorePaymentResult result);

  /// Called when an error occurs
  void onError(RustoreError error);

  static void setUp(RustoreBillingCallbackApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onPurchaseResult$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onPurchaseResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RustorePaymentResult? arg_result = (args[0] as RustorePaymentResult?);
          assert(arg_result != null,
              'Argument for dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onPurchaseResult was null, expected non-null RustorePaymentResult.');
          try {
            api.onPurchaseResult(arg_result!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RustoreError? arg_error = (args[0] as RustoreError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.rustore_billing_api.RustoreBillingCallbackApi.onError was null, expected non-null RustoreError.');
          try {
            api.onError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
